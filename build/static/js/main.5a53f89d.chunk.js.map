{"version":3,"sources":["data/cities.ts","api/geocodingService.ts","components/CityInput.tsx","utils/weatherCode.ts","components/WeatherDisplay.tsx","components/WeatherList.tsx","components/Footer.tsx","components/Navbar.tsx","utils/cache.ts","api/weatherService.ts","App.tsx","index.tsx"],"names":["CITIES","name","country","latitude","longitude","formatCityLabel","c","concat","memoryCache","Map","CityInput","_ref","onSelect","query","setQuery","useState","suggestions","setSuggestions","showSuggestions","setShowSuggestions","debounceRef","useRef","handleFilter","useMemo","input","q","String","trim","toLowerCase","filter","includes","slice","useEffect","current","window","clearTimeout","handleSuggestionClick","option","_jsxs","onSubmit","event","preventDefault","length","autoComplete","className","children","_jsx","type","value","onChange","e","target","setTimeout","apiResults","async","count","arguments","undefined","language","key","makeKey","cached","get","response","axios","params","format","raw","data","results","mapped","Array","isArray","r","map","country_code","set","_","searchCities","placeholder","onFocus","onBlur","onClick","MAP","label","icon","getWeatherCodeInfo","code","WeatherDisplay","city","temperature","humidity","windSpeed","description","forecast","d","fInfo","weathercode","Date","date","toLocaleDateString","tmax","tmin","precipitation","WeatherList","items","item","style","maxWidth","Footer","background","color","getFullYear","href","rel","Navbar","onClear","compareMode","onToggleCompare","provider","onProviderChange","id","v","checked","htmlFor","ONE_HOUR_MS","makeWeatherKey","setCache","entry","timestamp","now","localStorage","setItem","JSON","stringify","getCache","maxAgeMs","getItem","parse","getStaleCache","CACHE_TTL_MS","OW_BASE","process","OW_KEY","currentProvider","fetchWeatherByCoords","cacheKey","url","lat","lon","appid","units","lang","_d$main$temp","_d$main","_d$main$humidity","_d$main2","_d$wind","_d$weather$","status","Error","Number","main","temp","base","wind","speed","Math","round","weather","err","stale","fetchOWCurrentByCoords","_r$data","exclude","daily","_d$dt","_d$temp$max","_d$temp","_d$temp$min","_d$temp2","_d$rain","_d$weather$0$id","_d$weather","_d$weather$2","dt","toISOString","max","min","rain","fetchOWForecast","_objectSpread","current_weather","hourly","forecast_days","timezone","currentWeather","time","len","temperature_2m_max","temperature_2m_min","precipitation_sum","from","i","currentInfo","humidityArr","relativehumidity_2m","weatherData","windspeed","fetchWeatherByCoordsOpenMeteo","App","cities","setCities","weatherDataList","setWeatherDataList","error","setError","loading","setLoading","setCompareMode","setProvider","loadCities","unique","values","Promise","allSettled","fulfilled","forEach","push","fetchManyWeatherData","list","setWeatherProvider","next","some","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a53f89d.chunk.js","sourcesContent":["export interface CityOption {\n  name: string;\n  country: string;\n  latitude: number;\n  longitude: number;\n}\n\nexport const CITIES: CityOption[] = [\n  { name: \"London\", country: \"United Kingdom\", latitude: 51.5074, longitude: -0.1278 },\n  { name: \"New York\", country: \"United States\", latitude: 40.7128, longitude: -74.0060 },\n  { name: \"Tokyo\", country: \"Japan\", latitude: 35.6895, longitude: 139.6917 },\n  { name: \"Sydney\", country: \"Australia\", latitude: -33.8688, longitude: 151.2093 },\n  { name: \"Madrid\", country: \"Spain\", latitude: 40.4168, longitude: -3.7038 },\n  { name: \"Barcelona\", country: \"Spain\", latitude: 41.3851, longitude: 2.1734 },\n  { name: \"Ciudad de México\", country: \"Mexico\", latitude: 19.4326, longitude: -99.1332 },\n  { name: \"Paris\", country: \"France\", latitude: 48.8566, longitude: 2.3522 },\n  { name: \"Berlin\", country: \"Germany\", latitude: 52.52, longitude: 13.405 },\n  { name: \"Buenos Aires\", country: \"Argentina\", latitude: -34.6037, longitude: -58.3816 },\n];\n\nexport const formatCityLabel = (c: CityOption) => `${c.name}, ${c.country}`;\n","/* eslint-disable */\nimport axios from 'axios';\nimport { CityOption } from '../data/cities';\n\nconst GEOCODING_URL = 'https://geocoding-api.open-meteo.com/v1/search';\n\n// simple in-memory cache for search results to avoid excessive requests\nconst memoryCache = new Map<string, CityOption[]>();\n\nfunction makeKey(q: string): string {\n  return `geocode_${q.trim().toLowerCase()}`;\n}\n\nexport async function searchCities(query: string, count: number = 10, language: string = 'es'): Promise<CityOption[]> {\n  const q = query.trim();\n  if (!q) return [];\n\n  const key = makeKey(`${q}_${count}_${language}`);\n  const cached = memoryCache.get(key);\n  if (cached) return cached;\n\n  try {\n    const response = await axios.get(GEOCODING_URL, {\n      params: { name: q, count, language, format: 'json' },\n    });\n\n    const raw = response && response.data && response.data.results ? response.data.results : [];\n    const results = Array.isArray(raw) ? raw : [];\n    const mapped: CityOption[] = results\n      .filter((r: any) => r && typeof r.latitude === 'number' && typeof r.longitude === 'number')\n      .map((r: any) => ({\n        name: String((r && r.name) || ''),\n        country: String((r && (r.country || r.country_code)) || ''),\n        latitude: r.latitude,\n        longitude: r.longitude,\n      }));\n\n    memoryCache.set(key, mapped);\n    return mapped;\n  } catch (_) {\n    return [];\n  }\n}\n","import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { CITIES, CityOption, formatCityLabel } from '../data/cities';\nimport { searchCities } from '../api/geocodingService';\n\ninterface Props {\n    onSelect: (option: CityOption) => void;\n}\n\nconst CityInput: React.FC<Props> = ({ onSelect }) => {\n    const [query, setQuery] = useState('');\n    const [suggestions, setSuggestions] = useState<CityOption[]>([]);\n    const [showSuggestions, setShowSuggestions] = useState(false);\n    const debounceRef = useRef<number | null>(null);\n\n    const handleFilter = useMemo<((input: string) => CityOption[])>(() => (input: string) => {\n        const q = String(input).trim().toLowerCase();\n        if (!q) return [];\n        return CITIES.filter(c =>\n            c.name.toLowerCase().includes(q) || c.country.toLowerCase().includes(q)\n        ).slice(0, 10);\n    }, []);\n\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const input = e.target.value;\n        setQuery(input);\n\n        if (debounceRef.current) window.clearTimeout(debounceRef.current);\n        debounceRef.current = window.setTimeout(() => {\n            (async () => {\n                // Try geocoding API first\n                const apiResults = await searchCities(input, 10, 'es');\n                let results: CityOption[] = apiResults;\n                // Fallback to local dataset if API returns empty\n                if (!results || results.length === 0) {\n                    results = handleFilter(input);\n                }\n                setSuggestions(results);\n                setShowSuggestions(!!input && results.length > 0);\n            })();\n        }, 300);\n    };\n\n    useEffect(() => () => { if (debounceRef.current) window.clearTimeout(debounceRef.current); }, []);\n\n    const handleSuggestionClick = (option: CityOption) => {\n        onSelect(option);\n        setQuery('');\n        setSuggestions([]);\n        setShowSuggestions(false);\n    };\n\n    const handleSubmit = (event: React.FormEvent) => {\n        event.preventDefault();\n        if (suggestions.length > 0) {\n            handleSuggestionClick(suggestions[0]);\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit} autoComplete=\"off\" className=\"d-flex position-relative\">\n            <input\n                className=\"form-control\"\n                type=\"text\"\n                value={query}\n                onChange={handleChange}\n                placeholder=\"Search city (e.g., Madrid, Spain)\"\n                onFocus={() => query.length > 0 && setShowSuggestions(true)}\n                onBlur={() => setTimeout(() => setShowSuggestions(false), 100)}\n            />\n            <button type=\"submit\" className=\"btn btn-primary ms-2\">Add</button>\n            {showSuggestions && suggestions.length > 0 && (\n                <ul className=\"suggestions-list list-group\">\n                    {suggestions.map((option) => (\n                        <li\n                            key={`${option.name}-${option.country}`}\n                            onClick={() => handleSuggestionClick(option)}\n                            className=\"suggestion-item list-group-item list-group-item-action\"\n                        >\n                            {formatCityLabel(option)}\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </form>\n    );\n};\n\nexport default CityInput;\n","export interface WeatherCodeInfo {\n  label: string;\n  icon: string; // simple emoji for now; can swap to icons later\n}\n\nconst MAP: Record<number, WeatherCodeInfo> = {\n  0: { label: 'Despejado', icon: '☀️' },\n  1: { label: 'Mayormente despejado', icon: '🌤️' },\n  2: { label: 'Parcialmente nublado', icon: '⛅' },\n  3: { label: 'Nublado', icon: '☁️' },\n  45: { label: 'Niebla', icon: '🌫️' },\n  48: { label: 'Niebla escarchada', icon: '🌫️' },\n  51: { label: 'Llovizna ligera', icon: '🌦️' },\n  53: { label: 'Llovizna', icon: '🌦️' },\n  55: { label: 'Llovizna intensa', icon: '🌧️' },\n  61: { label: 'Lluvia ligera', icon: '🌧️' },\n  63: { label: 'Lluvia', icon: '🌧️' },\n  65: { label: 'Lluvia intensa', icon: '🌧️' },\n  71: { label: 'Nieve ligera', icon: '🌨️' },\n  73: { label: 'Nieve', icon: '🌨️' },\n  75: { label: 'Nieve intensa', icon: '❄️' },\n  80: { label: 'Chubascos ligeros', icon: '🌦️' },\n  81: { label: 'Chubascos', icon: '🌦️' },\n  82: { label: 'Chubascos intensos', icon: '⛈️' },\n  95: { label: 'Tormenta', icon: '⛈️' },\n  96: { label: 'Tormenta con granizo', icon: '⛈️' },\n  99: { label: 'Tormenta fuerte con granizo', icon: '⛈️' },\n};\n\nexport function getWeatherCodeInfo(code?: number): WeatherCodeInfo {\n  if (typeof code !== 'number') return { label: 'N/D', icon: 'ℹ️' };\n  return MAP[code] || { label: `Código ${code}`, icon: 'ℹ️' };\n}\n","import React from 'react';\nimport { WeatherData } from '../types';\nimport { getWeatherCodeInfo } from '../utils/weatherCode';\n\ninterface WeatherDisplayProps {\n    data: WeatherData | null;\n}\n\nconst WeatherDisplay: React.FC<WeatherDisplayProps> = ({ data }) => {\n    if (!data) {\n        return <div>No weather data available. Please enter a city.</div>;\n    }\n\n    const info = getWeatherCodeInfo(); // description already in data, icon via forecast or current code unknown here\n    return (\n        <div className=\"weather-display\">\n            <h5 className=\"card-title mb-2\">{data.city}</h5>\n            <div className=\"d-flex align-items-center mb-2\">\n                <span className=\"me-2\" aria-hidden>🌡️</span>\n                <span className=\"me-3\">{data.temperature}°C</span>\n                <span className=\"me-2\" aria-hidden>💧</span>\n                <span className=\"me-3\">{data.humidity}%</span>\n                <span className=\"me-2\" aria-hidden>💨</span>\n                <span>{data.windSpeed} km/h</span>\n            </div>\n            <div className=\"mb-3\">\n                <span className=\"badge bg-primary\">{data.description}</span>\n            </div>\n\n            {Array.isArray(data.forecast) && data.forecast.length > 0 && (\n                <div>\n                    <h6 className=\"mb-2\">Pronóstico 5 días</h6>\n                    <div className=\"row g-2\">\n                        {data.forecast.slice(0, 5).map((d) => {\n                            const fInfo = getWeatherCodeInfo(d.weathercode);\n                            return (\n                                <div key={d.date} className=\"col-6 col-md-4 col-lg-3\">\n                                    <div className=\"border rounded p-2 bg-light text-dark\">\n                                        <div className=\"small fw-bold\">{new Date(d.date).toLocaleDateString()}</div>\n                                        <div className=\"fs-5\" aria-hidden>{fInfo.icon}</div>\n                                        <div className=\"small\">{fInfo.label}</div>\n                                        <div className=\"small\">Máx: {d.tmax}°C</div>\n                                        <div className=\"small\">Mín: {d.tmin}°C</div>\n                                        <div className=\"small\">🌧️ {d.precipitation} mm</div>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default WeatherDisplay;\n","import React from 'react';\nimport { WeatherData } from '../types';\nimport WeatherDisplay from './WeatherDisplay';\n\ninterface WeatherListProps {\n  items: WeatherData[];\n}\n\nconst WeatherList: React.FC<WeatherListProps> = ({ items }) => {\n  if (!items || items.length === 0) {\n    return <div className=\"text-center text-light\">No weather data available. Add a city to begin.</div>;\n  }\n\n  return (\n    <div className=\"row g-3 mt-3 justify-content-center\">\n      {items.map((item) => (\n        <div key={item.city} className=\"col-12 col-md-8 col-lg-6 d-flex justify-content-center\">\n          <div className=\"card shadow-sm w-100\" style={{ maxWidth: 560 }}>\n            <div className=\"card-body\">\n              <WeatherDisplay data={item} />\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default WeatherList;\n","import React from 'react';\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"text-center fixed-bottom py-2\" style={{ background: 'transparent', color: '#fff' }}>\n      <small>\n        © {new Date().getFullYear()} Derechos reservados — Hecho por\n        {' '}\n        <a\n          href=\"https://github.com/brunochc\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"link-light text-decoration-none\"\n        >\n          Bruno Henriquez\n        </a>\n        {' · '}Datos por{' '}\n        <a\n          href=\"https://open-meteo.com/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"link-light text-decoration-none\"\n        >\n          Open‑Meteo\n        </a>\n        {' / '}\n        <a\n          href=\"https://openweathermap.org/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className=\"link-light text-decoration-none\"\n        >\n          OpenWeather\n        </a>\n      </small>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\n\ninterface Props {\n  onClear: () => void;\n  compareMode: boolean;\n  onToggleCompare: (value: boolean) => void;\n  provider: 'openmeteo' | 'openweather';\n  onProviderChange: (value: 'openmeteo' | 'openweather') => void;\n}\n\nconst Navbar: React.FC<Props> = ({ onClear, compareMode, onToggleCompare, provider, onProviderChange }) => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark\" style={{ background: 'transparent' }}>\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"#\">Weather App</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0 align-items-center\">\n            <li className=\"nav-item me-3\">\n              <label className=\"form-label me-2 mb-0\">Proveedor</label>\n              <select\n                className=\"form-select form-select-sm d-inline-block w-auto\"\n                value={provider}\n                onChange={(e) => {\n                  const v = e.target.value === 'openweather' ? 'openweather' : 'openmeteo';\n                  onProviderChange(v);\n                }}\n              >\n                <option value=\"openmeteo\">Open‑Meteo</option>\n                <option value=\"openweather\">OpenWeather</option>\n              </select>\n            </li>\n            <li className=\"nav-item me-3\">\n              <div className=\"form-check form-switch\">\n                <input\n                  className=\"form-check-input\"\n                  type=\"checkbox\"\n                  id=\"compareSwitch\"\n                  checked={compareMode}\n                  onChange={(e) => onToggleCompare(e.target.checked)}\n                />\n                <label className=\"form-check-label\" htmlFor=\"compareSwitch\">\n                  Comparar múltiples\n                </label>\n              </div>\n            </li>\n            <li className=\"nav-item\">\n              <button type=\"button\" className=\"btn btn-outline-light btn-sm\" onClick={onClear}>\n                Limpiar resultados\n              </button>\n            </li>\n          </ul>\n          <div className=\"d-flex\">\n            <a\n              href=\"https://github.com/brunochc\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"nav-link link-light\"\n            >\n              GitHub\n            </a>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","/* eslint-disable */\nexport interface CacheEntry<T> {\n  value: T;\n  timestamp: number; // epoch ms\n}\n\nconst ONE_HOUR_MS = 60 * 60 * 1000;\n\nexport const makeWeatherKey = (city: string) => `weather_${city.trim().toLowerCase()}`;\n\nexport function setCache<T>(key: string, value: T): void {\n  try {\n    const entry: CacheEntry<T> = { value, timestamp: Date.now() };\n    localStorage.setItem(key, JSON.stringify(entry));\n  } catch (_) {\n    // Ignore storage errors (e.g., quota, SSR)\n  }\n}\n\nexport function getCache(key: string, maxAgeMs: number = ONE_HOUR_MS): any | null {\n  try {\n    const raw = localStorage.getItem(key);\n    if (!raw) return null;\n    const entry: any = JSON.parse(raw);\n    if (!entry || typeof entry.timestamp !== 'number') return null;\n    if (Date.now() - entry.timestamp > maxAgeMs) return null;\n    return entry.value;\n  } catch (_) {\n    return null;\n  }\n}\n\nexport function getStaleCache(key: string): any | null {\n  // Returns cached value ignoring expiration\n  try {\n    const raw = localStorage.getItem(key);\n    if (!raw) return null;\n    const entry: any = JSON.parse(raw);\n    return entry && 'value' in entry ? entry.value : null;\n  } catch (_) {\n    return null;\n  }\n}\n\nexport const CACHE_TTL_MS = ONE_HOUR_MS;\n","/* eslint-disable */\nimport axios from 'axios';\nimport { ForecastDay, WeatherData } from '../types';\nimport { CACHE_TTL_MS, getCache, getStaleCache, makeWeatherKey, setCache } from '../utils/cache';\nimport { CityOption, formatCityLabel } from '../data/cities';\nimport { getWeatherCodeInfo } from '../utils/weatherCode';\n\nconst API_URL = 'https://api.open-meteo.com/v1/forecast';\n// OpenWeather configurable endpoints (note: REACT_APP_* are exposed to the client bundle)\nconst OW_BASE = process.env.REACT_APP_OPENWEATHER_BASE || 'https://api.openweathermap.org';\nconst OW_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY;\ntype Provider = 'openmeteo' | 'openweather';\nfunction envProvider(): Provider {\n    const raw = String(process.env.REACT_APP_PROVIDER || 'openmeteo').toLowerCase();\n    return raw === 'openweather' ? 'openweather' : 'openmeteo';\n}\nlet currentProvider: Provider = envProvider();\nexport function setWeatherProvider(provider: Provider) {\n    currentProvider = provider;\n}\n\n// Open-Meteo: Fetch current weather by coordinates (existing implementation, kept as default)\nconst fetchWeatherByCoordsOpenMeteo = async (option: CityOption): Promise<WeatherData> => {\n    const label = formatCityLabel(option);\n    const cacheKey = makeWeatherKey(label);\n    const cached = getCache(cacheKey, CACHE_TTL_MS);\n    if (cached) return cached;\n\n    const { latitude, longitude } = option;\n    try {\n        const response = await axios.get(API_URL, {\n            params: {\n                latitude,\n                longitude,\n                current_weather: true,\n                hourly: 'relativehumidity_2m',\n                daily: 'temperature_2m_max,temperature_2m_min,precipitation_sum,weathercode',\n                forecast_days: 5,\n                timezone: 'auto',\n            },\n        });\n\n        if (response.status !== 200) {\n            throw new Error('Failed to fetch weather data');\n        }\n\n        const currentWeather = response.data.current_weather;\n        if (!currentWeather) {\n            throw new Error('No current weather data available');\n        }\n\n        // Map daily forecast if present\n        let forecast: ForecastDay[] | undefined = undefined;\n        const daily = response.data.daily;\n        if (daily && Array.isArray(daily.time)) {\n            const len = Math.min(\n                daily.time.length || 0,\n                (daily.temperature_2m_max || []).length,\n                (daily.temperature_2m_min || []).length,\n                (daily.precipitation_sum || []).length,\n                (daily.weathercode || []).length,\n            );\n            forecast = Array.from({ length: len }).map((_, i) => ({\n                date: String(daily.time[i]),\n                tmax: Number(daily.temperature_2m_max[i]),\n                tmin: Number(daily.temperature_2m_min[i]),\n                precipitation: Number(daily.precipitation_sum[i] || 0),\n                weathercode: Number(daily.weathercode[i]),\n            }));\n        }\n\n        const currentInfo = getWeatherCodeInfo(currentWeather.weathercode);\n        const humidityArr = response.data.hourly && response.data.hourly.relativehumidity_2m;\n        const humidity = Array.isArray(humidityArr) && humidityArr.length > 0 ? Number(humidityArr[0]) : 0;\n\n        const weatherData: WeatherData = {\n            temperature: currentWeather.temperature,\n            humidity,\n            windSpeed: currentWeather.windspeed,\n            description: currentInfo.label,\n            city: label,\n            forecast,\n        };\n\n        setCache(cacheKey, weatherData);\n        return weatherData;\n    } catch (err) {\n        const stale = getStaleCache(cacheKey);\n        if (stale) return stale;\n        throw err;\n    }\n};\n\n// OpenWeather: current weather by coordinates (maps to WeatherData)\nasync function fetchOWCurrentByCoords(option: CityOption): Promise<WeatherData> {\n    if (!OW_KEY) throw new Error('Missing REACT_APP_OPENWEATHER_API_KEY');\n    const label = formatCityLabel(option);\n    const cacheKey = makeWeatherKey(`ow_${label}`);\n    const cached = getCache(cacheKey, CACHE_TTL_MS);\n    if (cached) return cached;\n\n    const { latitude, longitude } = option;\n    const url = `${OW_BASE}/data/2.5/weather`;\n    const params = {\n        lat: latitude,\n        lon: longitude,\n        appid: OW_KEY,\n        units: 'metric',\n        lang: 'es',\n    };\n\n    try {\n        const response = await axios.get(url, { params });\n        if (response.status !== 200) throw new Error('Failed to fetch OpenWeather current');\n        const d = response.data || {};\n\n        const temperature = Number(d?.main?.temp ?? 0);\n        const humidity = Number(d?.main?.humidity ?? 0);\n        // OpenWeather wind speed is in m/s with units=metric; convert to km/h\n        const windSpeed = typeof d?.wind?.speed === 'number' ? Math.round(d.wind.speed * 3.6) : 0;\n        const description = Array.isArray(d?.weather) && d.weather[0]?.description\n            ? String(d.weather[0].description)\n            : 'N/D';\n\n        const base: WeatherData = {\n            temperature,\n            humidity,\n            windSpeed,\n            description,\n            city: label,\n            forecast: undefined,\n        };\n\n        setCache(cacheKey, base);\n        return base;\n    } catch (err) {\n        const stale = getStaleCache(cacheKey);\n        if (stale) return stale;\n        throw err;\n    }\n}\n\n// Optional: OpenWeather One Call 3.0 forecast (5 days slice)\nasync function fetchOWForecast(option: CityOption): Promise<ForecastDay[] | undefined> {\n    if (!OW_KEY) return undefined;\n    const { latitude, longitude } = option;\n    const url = `${OW_BASE}/data/3.0/onecall`;\n    const params = {\n        lat: latitude,\n        lon: longitude,\n        appid: OW_KEY,\n        units: 'metric',\n        lang: 'es',\n        exclude: 'minutely,hourly,alerts',\n    };\n\n    const r = await axios.get(url, { params });\n    const daily = r?.data?.daily;\n    if (!Array.isArray(daily)) return undefined;\n    return daily.slice(0, 5).map((d: any) => ({\n        date: new Date(Number(d?.dt ?? 0) * 1000).toISOString(),\n        tmax: Number(d?.temp?.max ?? 0),\n        tmin: Number(d?.temp?.min ?? 0),\n        precipitation: Number(d?.rain ?? 0),\n        // OpenWeather weather.id is different from Open-Meteo codes; use 0 to render generic icon/label\n        weathercode: Number(d?.weather?.[0]?.id ?? 0),\n    }));\n}\n\n// Provider-switching wrapper\nexport const fetchWeatherByCoords = async (option: CityOption): Promise<WeatherData> => {\n    if (currentProvider === 'openweather') {\n        const current = await fetchOWCurrentByCoords(option);\n        // Try to augment with forecast; ignore errors to keep current weather working\n        try {\n            const forecast = await fetchOWForecast(option);\n            return { ...current, forecast };\n        } catch (_) {\n            return current;\n        }\n    }\n    return fetchWeatherByCoordsOpenMeteo(option);\n};\n\n// Backward-compatible string-based fetch (maps to first matching city by name)\nexport const fetchWeatherData = async (city: string): Promise<WeatherData> => {\n    const normalized = city.trim().toLowerCase();\n    // Lazy import to avoid circular deps\n    const { CITIES } = await import('../data/cities');\n    const match = CITIES.find(\n        c => c.name.toLowerCase() === normalized || `${c.name}, ${c.country}`.toLowerCase() === normalized\n    );\n    if (!match) {\n        // Fallback to first city to avoid undefined; better to throw in strict mode\n        return fetchWeatherByCoords(CITIES[0]);\n    }\n    return fetchWeatherByCoords(match);\n};\n\nexport const fetchManyWeatherData = async (cities: CityOption[]): Promise<WeatherData[]> => {\n    // Unique by coordinates to avoid duplicates\n    const unique = Array.from(new Map(cities.map(c => [`${c.latitude},${c.longitude}`, c])).values());\n\n    const results = await Promise.allSettled(unique.map((c) => fetchWeatherByCoords(c)));\n    const fulfilled: WeatherData[] = [];\n    results.forEach((r) => {\n        if (r.status === 'fulfilled') fulfilled.push(r.value);\n    });\n    return fulfilled;\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport CityInput from './components/CityInput';\nimport WeatherList from './components/WeatherList';\nimport Footer from './components/Footer';\nimport Navbar from './components/Navbar';\nimport { fetchManyWeatherData, setWeatherProvider } from './api/weatherService';\nimport { WeatherData } from './types';\nimport { CityOption } from './data/cities';\n\nconst App: React.FC = () => {\n    const [cities, setCities] = useState<CityOption[]>([]);\n    const [weatherDataList, setWeatherDataList] = useState<WeatherData[]>([]);\n    const [error, setError] = useState<string | null>(null);\n    const [loading, setLoading] = useState<boolean>(false);\n    const [compareMode, setCompareMode] = useState<boolean>(false);\n    function initialProvider(): 'openmeteo' | 'openweather' {\n        const raw = String(process.env.REACT_APP_PROVIDER || 'openmeteo').toLowerCase();\n        return raw === 'openweather' ? 'openweather' : 'openmeteo';\n    }\n    const [provider, setProvider] = useState<'openmeteo' | 'openweather'>(initialProvider());\n\n    const loadCities = async (list: CityOption[]) => {\n        setLoading(true);\n        setError(null);\n        try {\n            const data = await fetchManyWeatherData(list);\n            setWeatherDataList(data);\n        } catch (err) {\n            setError('Error fetching weather data. Some results may be unavailable offline.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        // No auto-load on mount. We only load on user selection.\n    }, []);\n\n    // Apply provider to service and refresh current results when it changes\n    useEffect(() => {\n        setWeatherProvider(provider);\n        if (cities.length > 0) {\n            // Reload with the new provider\n            loadCities(cities);\n        }\n        // eslint-disable-next-line\n    }, [provider]);\n\n    const handleCitySelect = async (option: CityOption) => {\n        const key = (c: CityOption) => `${c.latitude},${c.longitude}`;\n        let next: CityOption[];\n        if (compareMode) {\n            const exists = cities.some(c => key(c) === key(option));\n            next = exists ? cities : [...cities, option];\n        } else {\n            next = [option];\n        }\n        setCities(next);\n        await loadCities(next);\n    };\n\n    return (\n        <div className=\"container-fluid app-container\">\n            <Navbar\n              onClear={() => { setCities([]); setWeatherDataList([]); setError(null); }}\n              compareMode={compareMode}\n              onToggleCompare={setCompareMode}\n              provider={provider}\n              onProviderChange={setProvider}\n            />\n            <h1 className=\"mb-4 text-center\">Weather App</h1>\n            <CityInput onSelect={handleCitySelect} />\n            {loading && <p>Loading...</p>}\n            {error && <p>{error}</p>}\n            {weatherDataList.length > 0 && <WeatherList items={weatherDataList} />}\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}